The concept behind “shift left” and “shift right” is excellent and is the focus of the agile and DevOps approaches. 
But modern software development is no longer a linear process, so what does left and right mean?

Shift-Left Testing

That last week isn’t a test week. Testing isn’t a phase, it’s an intrinsic part of development.

Most projects, even with agile teams, feel like testing is the last step in the process. We happily get development collaborating with product folks early in the process and build the product in smaller bits, but testing early is a struggle. Squeezing testing in at the end creates problems.

Testers join design sessions to ask questions about how customers work.
Some team members can work closely with back-end developers to ask questions and create test ideas and 'what if' type scenarios. (Exploratory Testing)
Others sit down with the API developers and stub out tests for new services while they were being developed. (Need to have Technical Leaning)
And yet others find themselves pairing up with the UI and API developers to test something new on their machine before it hit a build.

Testing may still happen at the end, but it will be smaller and faster because of the problems you are able to find earlier on. Shift left doesn't exactly move testing closer to the beginning of a release cycle. It sprinkles it over each step and each iteration.

Managing Test Activities:
People get some weird ideas about managing testing when it gets cut out of the development pie. Managers try to get a gauge on tester performance by measuring things like bug count, and the number of tests run in a day. And the development team somehow starts thinking that running out of documented tests means that we are getting closer to a release. When teams help testing happen earlier, those things just sort of go away.

How to do?
BDD (BDD frameworks like Cucumber, SpecFlow and JBehave)
TDD
Automated Testing

Shift right:
By “shift right”, people mean that they aren’t going to just throw the feature over the wall to ops when it deploys,
they’re going to monitor, observe, analyze log data, and “test in production”. DevOps drew our attention to the need to keep testing even when the new changes are deployed to production. 
We can use feature toggles and other means to manage our changes until we’re satisfied they’re working correctly in production.

****Infinity Symbol: There’s no beginning, there’ll be no end (hopefully!) 
Modern software development is an infinite loop of developing small chunks of features, getting feedback as they are used in production (perhaps by a small number of people), and continuing to add, remove, and change them based on what we learn from the feedback. 

Discover | Deliver --- 2 sides of infinity loop

Testing plays a major part on both sides of this building and learning loop.

Because today’s software development is continual, we now talk about “continuous testing”

When we say “shift left” today, we’re really referring to the left loop of the infinite loop of software development and delivery. 
And when we “shift right”, we’re engaging in that right-hand loop. 

Rather than focusing our testing on the time when a release candidate is built and delivered, we widen our scope left and right.











