
Quick win created momentum

Sprint Reviews --- Should be Feedback Party | and not Demo Festival
The valuable dialogues between the stakeholders and the Developers should be encouraged and not PO/SM taking the centre stage.
Feedback: does it meet all the acceptance criteria/expectations, functional, non-functional?

Experiment 2-part Sprint Reviews: Organize "small circle" (detailed, frequent) and " large circle" (overview, not-so-frequent) 





Work Agreements --- Inline with Scrum Values.
Talk about Challenges | 
Respect: Respect for boundaries/ Respect for Timebox

Intro Carousel:
Future of Scrum is: Wider Adoption, Adaptability

Predictability Vs Adaptability
Solution is evolving as we learn. Short-term cycles planining/ continuous planning, Empiricism. No defined Project Plans.

Sel-Organizing --- no dictate. Treat people as Knowledge Workers and not Laboures. Managemnt just lays some boundaries. Within the boundaries, Let the Team Self-manage.

SM -- has to have People Skills. to handle human emotions.
Transparency: is always through Facts .. and not Perception.
Data is brought through Scrum Artifacts: Product Backlog (PO accountability) | Sprint Backlog (Developers) | Increment (Scrum Team)

For Complex work, there is no expert. there is no right answer.

SM serves PO, Developers, Org.
Developers serves PO
PO serves Customers/Stakeholders


1 Product Owner - many Product Managers
PO can take help of SMEs. But he/She is the Decision Maker.

Accountability Vs Responsilibity
Responsibility can be delegated but not the accountability.

What is Scrum: 3-5-3-3-3

Who can add PBIs to the Product Backlog? : Any one can add. But the accountability of Ordering lies with PO.

When the Sprint ends, unfinished PBIs goes back to Product Backlog.

The Top PBIs in Product Backlog are the ones "refined", The items below are unrefined/ vague/raw.

Product Refinement happens ( may be not as a meeting, but discussions, involving as required ppl) to get clarity on "WHAT"
Sprint Planning happens after Product Refinement, focusing on "How"

 Transparency | Inspection | Adaptation ----------- are the pillars of Empericism
 
 Stakeholders: Investors | Customer | Consumers | Govt./Legal |
 
Invite Manager to the Sprint Review.
Otherwise my Team will start inflating the numbers. Trust the Team.
We are working in a Complex Domain. These are our Impediments. Help us resolve them.
Velocity is a measure of Progress not Productivity. Its operational Metrics.

Create a Foundation of Trust in your Ecosystem. Psychological Safety and not culture of Fear by living the Scrum Values.
As a SM, I trust my Team, I trust my PO.

*** Developers forecast the Sprint Backlog and commit to the Sprint Goal.

What are the complementary practices?
Kanaban board, velocity, estimation, automation, pair programming

You can use/ignore as needed. Dont let it interfere/ hindrance to empiricism/agility.

Hardening/Stabilizing Sprint.

Part of efforts towards creating Business Value, other part as Support/Enablers/Adhoc work.

We dont like Individual Heroes.

Shouldnt be SM driven. Shouldn't be the sole Decision maker.

Leading by Example:
------------------------
Its ok to express vulnerability

Ability to Read the Room:
-----------------------------
Sense Energy drooping / Loud voices take over or suppress others / 

Retrospective Prime Directive:
-------------------------------
Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand. —Norm Kerth


Give 5 mins to vent out. Silence has its own power

Impediment: something which is beyond the control of self-manging Team
Let the team first try to solve the problem.

Servant Leadership
Leaders have a vision which they achieve by serving

Coaching: is for a particular problem. Be a bouncing board, active listening, Ask powerful/open ended questions
so that people can come up with their own solutions

Mentoring: Relationship based. 

breakout rooms - u practiced Self-managing, boundary condition established (time box), working on common goal, given the accountability.

Team solutions are the best.

2 options for SM.
Calm down/ passify.

Actively not take action   | Take Action

"Training from back of the room"

Accountable for quality of Increment? Scrum Team and not just Developers

https://www.funretrospectives.com/

"Innovation rate" metrics used by PO
%money on R&D, %money on maintenance

Forming Teams based on "Component"(architecture building block/Layer/subsystem) or "Feature"

Story Mapping , Impact Mapping Techniques

Conflict Management:
Give some time for people can calm down. Diffuse it.
Have 1:1 with individuals if needed
Next step is to talk to the Team and facilitate.

It may give a false sense.. and blow out at the end..

Best Engineering Practices: Automation/Pair,Mob Programming, TDD, 

Facilitator: Steer in the right direction

If DoD is met, only then it is done, otherwise, it carry fwds. no Story points is counted.

Velocity can also be used by PO to do release planning/forecast. Velocity acts as a business metrics.

"SM: Help the Team see value in xxxxx" (Coaching)

20% productivity loss -- on context switching

Ralph Stacey ------------ Complex System Theory

Scrum works in Complex domain. Servant Leadership works. Self-Manage within the set Boundaries.

Business Agility: You (Org) can call themselves agile if: 
You respond to changing market conditions quickly?
We are increasing our ROI
We reduce our Risk of Investment (build product in small iterations)

** Cross Team not equals to full stack developer (they cant do all tasks)

Acceptance Criteria is not just PO responsibility.

Sprint Goal: Will give u focus, flexibility and purpose

Team Formation:
--------------------------
Set the Boundaries: n teams, mix of jr and senior, mix of skills (ui/dba/java)
Do this in a time box- say 2 hrs

Triz Technique - Liberation Structure
You are a Spy. How will u spoil a SM.

Empathy Map: (Have it in your Tool Kit)
--------------------------------

Metrics:
Quality | Value | Flow | Responsiveness | Improvement

Focus more on Business Metrics and less on Operational Metrics

Chk scrum.org's Evidence based Management

SM helps create High Performing Team, Teams

Tactical Coach (SM) vs Strategic Coach

DISC Personaility Test by Myers Briggs

1st intervention: Retro with Leaders, Managers, Ppl

Scrum Value of 'Courage' - Courage to say 'NO'

Scrum team crafts the Sprint Goal???

-------------------------------
SM:
------------
At all times Scrum Masters are of service to the goals of the team, the Product Owner and the organization.

- create a participative environment, empowering ‘employees’ by sharing power and decision-making.
- is not master of the team, but a master at encouraging, enabling, and energizing people to gel as a team and realize their full potential.
- Setting up Scrum as a servant process, not a commanding process

- Effective coaching is guiding without prescribing. . It is helping people to learn rather than teach them by unblocking a person’s potential
- Think with your head and feel with your heart. A coach balances thinking and feeling.
They apply logical thinking as well as empathy when solving problems.

- Be ‘content neutral’, not taking sides. g he/she doesn’t take a particular position in the discussion

- A mentor is a wise and trusted counsellor.

he Scrum Master is responsible for promoting and supporting Scrum as defined in the Scrum Guide. 
Scrum Masters do this by helping everyone understand Scrum theory, practices, rules, and values.
the Scrum Master role is not about process enforcement. ‘Agile needs to be pulled; it cannot be pushed.

The Scrum Master is a servant-leader for the Scrum Team. 
The Scrum Master helps those outside the Scrum Team understand which of their interactions with the Scrum Team are helpful and which aren’t.
The Scrum Master helps everyone change these interactions to maximize the value created by the Scrum Team.

role is to lead — as opposed to manage — the team.

If a Scrum Master acts like a ‘Scrum helicopter parent,’ their team will never become self-organizing. Shouldn't be protective parenting.

A Scrum Team must learn to make its own decisions. a team must be allowed to learn from their failures.

This applies when the Scrum Team cannot solve the problem by themselves, for example, because the issue is an organizational problem. Now we are talking about “impediments.” Only in this situation, the Scrum Master becomes the impediment remover of the Scrum Team.

Scrum Master should live and breathe Scrum values, principles.
spread an agile mindset throughout an organization. create a learning organization that embraces experimentation in order to identify the best product for its customers.

SM uses the powerful tool of 'Observation' to have insights on problem at hand.

Committment: Scrum Value (Be dedicated to a cause or activity)
--------------------------------------
this was wrongly turned into the expectation that all scope would be delivered, no matter. ‘Commitment’ was wrongly turned into a hard-coded contract
the team would do the maximum possible effort in the Sprint and be completely transparent about progress.

We Commit to ....  (Activity)
We commit to the team. Commit to quality. Commit to collaborate. Commit to learn. Commit to do the best we can, every day again. 
Commit to the Sprint Goal. Commit to be professional. Commit to self-organize. Commit to excellence. Commit to the agile principles.
Commit to create working software. Commit to look for improvements. Commit to the Definition of Done. Commit to the Scrum framework. Commit to focus on Value.
Commit to finish work. Commit to inspect & adapt. Commit to transparency. Commit to challenge the status-quo.

focus:
-------------
We focus on what we know now. We focus on what’s most nearby in time as the future is highly uncertain and we want to learn from the present to gain experience for future work.

Openness:
-----------
We are open about our work, our progress, our learning and our problems. 
But we are also open for people, and working with people; acknowledging people to be people, and not resources, robots or replaceable pieces of machinery as software development -after all- is still the work of humans. 

We are open to collaborate across disciplines and skills. We are open to collaborate with stakeholders and the wider environment. Open in sharing feedback and learn from one another. Open for change as the organization and the world it operates in change unpredictably, unexpectedly and constantly.

Respect:
-------------
We show respect for people, their experience and their personal background. We respect diversity (it makes us stronger). We respect different opinions (we might learn from it). We show respect for our sponsors by not building features that nobody will use. We show respect by not wasting money on things that are not valuable or might never being implemented or used. We show respect for users by fixing their problems. We respect the Scrum framework. We respect our wider environment by not behaving as an isolated island in the world. We respect each other’s skills, expertise and insights. We respect the accountabilities of the Scrum roles.

Courage:
------------
We show courage in not building stuff that nobody wants. Courage in admitting requirements will never be perfect and that no plan can capture reality and complexity. Courage to consider change as a source of inspiration and innovation. Courage to not deliver undone software. Courage in sharing all possible information (transparency) that might help the team and the organization. Courage in admitting that nobody is perfect. Courage to change direction. Courage to share risks and benefits. Courage to promote Scrum and empiricism to deal with complexity. Courage to let go of the feint certainties of the past. We show courage to support the Scrum Values.











Fun Retro:
---------------
use Retromat, Tasty cupcakes—or be creative with Liberating Structures and Training from the Back of the Room exercises.

it is about doing the right things, and less about doing the things right. it is mainly about adaptability over following a plan.
have the courage to stop an effort in case the chosen course is no longer viable. testing hypotheses as fast and as inexpensive as possible

is a leadership role, yielding no authority in a traditional management sense.

There is a fine line between a product manager and a Product Owner role, and it depends on how the role is crystallized in the company’s structure and culture. 
Usually, besides product management duties, Product Ownership entails establishing the product vision and strategy, its alignment with the company’s goals and objectives, and managing any internal and external stakeholders in this process.

Saying “no” is an essential qualification—and empowerment—for each Product Owner. For example, it is required to protect the team from a stakeholder’s pet project of a doubtful value.

Suppose a person or a group of individuals, for example, a product council, exercises control over the Product Backlog. In that case, you’re not a Product Owner but a proxy.

What “labels” come to your mind when you think of your role as Product Owner?
CEO of the product, product visionary, strategic thinker, servant leader w/o authority, entrepreneur/intrapreneur, innovator, systems thinker, single wringable neck.

you should dig deeper into that. 

Sprint Planning:
----------------------
How do u forecast?
- based on velocity, DoD

Scrum Team:
---------------------
- commits to the Sprint Goal   --- who crafts? Scrum Team
- commits to the Increment     --- who develops? developers
- commits to the DoD           



































































